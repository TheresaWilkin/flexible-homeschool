# project: cj7s3b05x05uy0146vvmws6nk
# version: 111

type User implements Node {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  school: School @relation(name: "UserInSchool")
  subjects: [EnrolledSubject!]! @relation(name: "UserInEnrolledSubject")
  email: String @isUnique
  password: String
  role: Role!
  studentAssignments: [StudentAssignment!]! @relation(name: "StudentAssignmentOnUser")
  studentSkills: [StudentSkill!]! @relation(name: "StudentSkillOnUser")
  ratings: [Rating!]! @relation(name: "RatingOnUser")
  timeVotes: [TimeVote!]! @relation(name: "TimeVoteOnUser")
}

type File implements Node {
  contentType: String!
  createdAt: DateTime!
  id: ID! @isUnique
  name: String!
  secret: String! @isUnique
  size: Int!
  updatedAt: DateTime!
  url: String! @isUnique
}

type School implements Node {
  id: ID! @isUnique
  name: String! @isUnique
  users: [User!]! @relation(name: "UserInSchool")
}

type Subject implements Node {
  id: ID! @isUnique
  name: String! @isUnique
  enrolledSubjects: [EnrolledSubject!]! @relation(name: "EnrolledSubjectOnSubject")
  skills: [Skill!]! @relation(name: "SkillOnSubject")
}

type EnrolledSubject implements Node {
  id: ID! @isUnique
  startDate: DateTime
  duration: Int
  completed: Boolean
  users: [User!]! @relation(name: "UserInEnrolledSubject")
  subject: Subject @relation(name: "EnrolledSubjectOnSubject")
}

type Assignment implements Node {
  description: String!
  duration: Int
  extraCredit: Boolean! @defaultValue(value: false)
  id: ID! @isUnique
  link: String
  name: String!
  pointValue: Int!
  repeatInterval: Int
  skills: [Skill!]! @relation(name: "AssignmentOnSkill")
  ageVotes: [AgeVote!]! @relation(name: "AgeVoteOnAssignment")
  timeVote: TimeVote @relation(name: "TimeVoteOnAssignment")
}

type AssignmentInstance implements Node {
  date: DateTime!
  id: ID! @isUnique
  ignore: Boolean! @defaultValue(value: false)
  pointsEarned: Int! @defaultValue(value: 0)
  studentAssignment: StudentAssignment @relation(name: "AssignmentInstanceOnStudentAssignment")
  submitted: Boolean! @defaultValue(value: false)
  attachments: [Attachment!]! @relation(name: "AttachmentOnAssignmentInstance")
}

type Attachment implements Node {
  id: ID! @isUnique
  imageUrl: String
  submissionUrl: String
  text: String
  assignmentInstance: AssignmentInstance @relation(name: "AttachmentOnAssignmentInstance")
  type: AttachmentType! @defaultValue(value: TEXT)
}

type Skill implements Node {
  assignments: [Assignment!]! @relation(name: "AssignmentOnSkill")
  id: ID! @isUnique
  name: String! @isUnique
  studentAssignments: [StudentAssignment!]! @relation(name: "StudentAssignmentOnSkill")
  studentSkills: [StudentSkill!]! @relation(name: "StudentSkillOnSkill")
  subjects: [Subject!]! @relation(name: "SkillOnSubject")
}

type StudentAssignment implements Node {
  assignmentInstances: [AssignmentInstance!]! @relation(name: "AssignmentInstanceOnStudentAssignment")
  description: String!
  duration: Int
  extraCredit: Boolean! @defaultValue(value: false)
  id: ID! @isUnique
  link: String
  name: String!
  pointValue: Int! @defaultValue(value: 0)
  repeatInterval: Int
  skills: [Skill!]! @relation(name: "StudentAssignmentOnSkill")
  startDate: DateTime
  user: User @relation(name: "StudentAssignmentOnUser")
}

type StudentSkill implements Node {
  completed: Boolean
  duration: Int
  id: ID! @isUnique
  skill: Skill @relation(name: "StudentSkillOnSkill")
  startDate: DateTime
  user: User @relation(name: "StudentSkillOnUser")
}

enum AttachmentType {
  TEXT
  IMAGE
  LINK
}

enum Role {
  TEACHER
  STUDENT
}

type AgeVote implements Node {
  age: Int!
  assignment: Assignment @relation(name: "AgeVoteOnAssignment")
  id: ID! @isUnique
  minimumAge: Boolean!
  resource: Resource @relation(name: "AgeVoteOnResource")
}

type Rating implements Node {
  id: ID! @isUnique
  resource: Resource @relation(name: "RatingOnResource")
  score: Int! @defaultValue(value: 0)
  user: User @relation(name: "RatingOnUser")
}

type Resource implements Node {
  ageVotes: [AgeVote!]! @relation(name: "AgeVoteOnResource")
  description: String!
  highestAge: Int! @defaultValue(value: 18)
  id: ID! @isUnique
  imageUrl: String! @defaultValue(value: "http://placeimg.com/400/200/nature")
  link: String
  lowestAge: Int! @defaultValue(value: 0)
  name: String!
  ratings: [Rating!]! @relation(name: "RatingOnResource")
  resourceTags: [TagVote!]! @relation(name: "ResourceTagOnResource")
  subject: String! @defaultValue(value: "")
  timeVotes: [TimeVote!]! @relation(name: "TimeVoteOnResource")
  createdDate: DateTime!
}

type Tag implements Node {
  id: ID! @isUnique
  name: String!
  resourceTags: [TagVote!]! @relation(name: "ResourceTagOnTag")
}

type TagVote implements Node {
  count: Int! @defaultValue(value: 0)
  id: ID! @isUnique
  resource: Resource @relation(name: "ResourceTagOnResource")
  tag: Tag @relation(name: "ResourceTagOnTag")
}

type TimeVote implements Node {
  assignment: Assignment @relation(name: "TimeVoteOnAssignment")
  hours: Int!
  id: ID! @isUnique
  resource: Resource @relation(name: "TimeVoteOnResource")
  user: User @relation(name: "TimeVoteOnUser")
}